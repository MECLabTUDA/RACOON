# Generated by Django 3.1.6 on 2021-02-18 12:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
            ],
            options={
                'verbose_name_plural': 'Daily Data',
                'db_table': 'daily_data',
            },
        ),
        migrations.CreateModel(
            name='Locations',
            fields=[
                ('location_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11)),
                ('name_de', models.CharField(default='', max_length=255)),
                ('name_en', models.CharField(default='', max_length=255)),
                ('description_de', models.TextField(blank=True, default='')),
                ('description_en', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Locations',
                'db_table': 'locations',
            },
        ),
        migrations.CreateModel(
            name='Measures',
            fields=[
                ('measure_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('public_visible', models.BooleanField(default=False, help_text='Select if this measure should be shown on the public dashboard page')),
                ('is_main', models.BooleanField(default=False, help_text='Main Measures are measures shown on the map that can be chosen in the configuration menu')),
                ('is_color_default', models.BooleanField(default=False, help_text="Determines the Color measure which is shown by default. Also requires a selection at 'is_main'")),
                ('is_size_default', models.BooleanField(default=False, help_text="Determines the Size measure which is shown by default. Also requires a selection at 'is_main'")),
                ('is_open_ended', models.BooleanField(default=True, help_text="Select if there is no upper limit of this measure. Otherwise determine the limits in 'lower_bound' and 'upper_bound'")),
                ('name_de', models.CharField(max_length=255)),
                ('name_en', models.CharField(max_length=255)),
                ('description_de', models.TextField(blank=True, default='')),
                ('description_en', models.TextField(blank=True, default='')),
                ('lower_bound', models.FloatField(default=0.0, help_text="The lower bound of the measure. Only respected if 'is_open_ended' is not ticked")),
                ('upper_bound', models.FloatField(default=0.0, help_text="The upper bound of the measure. Only respected if 'is_open_ended' is not ticked")),
            ],
            options={
                'verbose_name_plural': 'Measures',
                'db_table': 'measures',
            },
        ),
        migrations.CreateModel(
            name='RacoonPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('all_locations_visible', models.BooleanField(default=False, help_text="Check if all locations should be visible for this user. If checked, the selection in 'visible locations' is ignored.")),
                ('api_post_permission', models.BooleanField(default=False, help_text='Allow user to send POST requests to backend API')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('visible_locations', models.ManyToManyField(blank=True, help_text='Select all locations that should be visible for this user on the dashboard.', to='base.Locations')),
            ],
        ),
        migrations.CreateModel(
            name='PlotData',
            fields=[
                ('plot_id', models.AutoField(primary_key=True, serialize=False)),
                ('public_visible', models.BooleanField(default=False, help_text='Select if this plot should be shown on the public dashboard page')),
                ('name_de', models.CharField(max_length=255)),
                ('name_en', models.CharField(max_length=255)),
                ('plot_data', models.JSONField(help_text="The actual data of the plot in form of a serialized JSON. Represents the 'options' of an apache echarts plot")),
                ('daily_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.dailydata')),
            ],
            options={
                'verbose_name_plural': 'Plot Data',
                'db_table': 'plot_data',
            },
        ),
        migrations.CreateModel(
            name='MeasureData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('daily_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.dailydata')),
                ('measure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.measures')),
            ],
            options={
                'verbose_name_plural': 'Measure Data',
                'db_table': 'measure_data',
            },
        ),
        migrations.AddField(
            model_name='dailydata',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.locations'),
        ),
        migrations.AddIndex(
            model_name='measuredata',
            index=models.Index(fields=['daily_data', 'measure'], name='measure_data_daily_d_077ac5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='measuredata',
            unique_together={('daily_data', 'measure')},
        ),
        migrations.AddIndex(
            model_name='dailydata',
            index=models.Index(fields=['date', 'location'], name='daily_data_date_9ae151_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dailydata',
            unique_together={('location', 'date')},
        ),
    ]
